const mongoose = require("mongoose");

// Content schema for different types of course materials
const contentSchema = new mongoose.Schema(
  {
    contentType: {
      type: String,
      enum: [
        "video",
        "video_slide_mashup",
        "article",
        "quiz",
        "coding_exercise",
        "assignment",
        "practice_test",
        "role_play",
        "presentation",
        "document",
      ],
      required: true,
    },
    title: {
      type: String,
      required: true,
      trim: true,
      maxlength: 200,
    },
    description: {
      type: String,
      maxlength: 2000,
      default: "",
    },
    duration: {
      type: Number, // in seconds
      default: 0,
    },
    isPreview: {
      type: Boolean,
      default: false,
    },
    isFree: {
      type: Boolean,
      default: false,
    },
    sortOrder: {
      type: Number,
      required: true,
      default: 0,
    },

    // Video content
    video: {
      url: { type: String },
      thumbnailUrl: { type: String },
      duration: { type: Number }, // in seconds
      quality: {
        type: String,
        enum: ["720p", "1080p", "4K"],
        default: "1080p",
      },
      size: { type: Number }, // in bytes
      uploadStatus: {
        type: String,
        enum: ["pending", "processing", "completed", "failed"],
        default: "pending",
      },
      captions: [
        {
          language: { type: String, required: true },
          url: { type: String, required: true },
          isAutoGenerated: { type: Boolean, default: false },
        },
      ],
    },

    // Slide/Presentation content
    slides: {
      url: { type: String },
      totalSlides: { type: Number, default: 0 },
      thumbnails: [{ type: String }], // Array of thumbnail URLs
      size: { type: Number }, // in bytes
      uploadStatus: {
        type: String,
        enum: ["pending", "processing", "completed", "failed"],
        default: "pending",
      },
    },

    // Document/PDF content
    document: {
      url: { type: String },
      filename: { type: String },
      size: { type: Number }, // in bytes
      mimeType: { type: String },
      uploadStatus: {
        type: String,
        enum: ["pending", "processing", "completed", "failed"],
        default: "pending",
      },
    },

    // Article content
    article: {
      content: { type: String }, // HTML content
      estimatedReadTime: { type: Number }, // in minutes
      wordCount: { type: Number },
    },

    // Quiz content
    quiz: {
      questions: [
        {
          _id: {
            type: mongoose.Schema.Types.ObjectId,
            auto: true,
          },
          questionType: {
            type: String,
            enum: ["multiple_choice", "true_false", "fill_blank", "essay"],
            required: true,
          },
          question: { type: String, required: true },
          options: [
            {
              text: String,
              isCorrect: Boolean,
            },
          ],
          correctAnswer: { type: String }, // For fill_blank and essay
          explanation: { type: String },
          points: { type: Number, default: 1 },
          timeLimit: { type: Number }, // in seconds
        },
      ],
      passingScore: { type: Number, default: 70 }, // percentage
      allowMultipleAttempts: { type: Boolean, default: true },
      maxAttempts: { type: Number, default: 3 },
      timeLimit: { type: Number }, // total quiz time in seconds
    },

    // Coding Exercise content
    codingExercise: {
      language: {
        type: String,
        enum: [
          "javascript",
          "python",
          "java",
          "cpp",
          "html_css",
          "react",
          "node",
        ],
        required: function () {
          return this.contentType === "coding_exercise";
        },
      },
      instructions: {
        type: String,
        required: function () {
          return this.contentType === "coding_exercise";
        },
      },
      starterCode: { type: String },
      solutionCode: { type: String },
      testCases: [
        {
          input: { type: String },
          expectedOutput: { type: String },
          isHidden: { type: Boolean, default: false },
        },
      ],
      hints: [{ type: String }],
      timeLimit: { type: Number }, // in minutes
    },

    // Assignment content
    assignment: {
      instructions: {
        type: String,
        required: function () {
          return this.contentType === "assignment";
        },
      },
      submissionType: {
        type: String,
        enum: ["file_upload", "text_submission", "url_submission"],
        required: function () {
          return this.contentType === "assignment";
        },
      },
      allowedFileTypes: [{ type: String }], // e.g., ['pdf', 'docx', 'jpg']
      maxFileSize: { type: Number }, // in bytes
      dueDate: { type: Date },
      gradingCriteria: { type: String },
      maxScore: { type: Number, default: 100 },
    },

    // Resources (supplementary materials)
    resources: [
      {
        title: { type: String, required: true },
        type: {
          type: String,
          enum: ["pdf", "document", "link", "image", "audio", "video", "zip"],
          required: true,
        },
        url: { type: String, required: true },
        size: { type: Number }, // in bytes
        description: { type: String },
      },
    ],

    // Notes for instructors
    notes: [
      {
        title: { type: String, required: true },
        topic: { type: String, required: true },
        fileUrl: { type: String },
        fileName: { type: String },
        fileSize: { type: Number }, // in bytes
        cloudinaryPublicId: { type: String }, // Cloudinary public ID for file management
        description: { type: String },
        isDownloadable: { type: Boolean, default: true },
        createdAt: { type: Date, default: Date.now },
      },
    ],

    // Completion tracking
    completionCriteria: {
      type: String,
      enum: [
        "view",
        "time_based",
        "interaction",
        "quiz_pass",
        "assignment_submit",
      ],
      default: "view",
    },
    minCompletionTime: { type: Number }, // minimum seconds to mark as complete

    // Analytics
    analytics: {
      totalViews: { type: Number, default: 0 },
      averageWatchTime: { type: Number, default: 0 }, // in seconds
      completionRate: { type: Number, default: 0 }, // percentage
      dropOffPoints: [
        {
          timestamp: Number, // seconds into content
          dropOffCount: Number,
        },
      ],
    },
  },
  {
    timestamps: true,
  }
);

// Section schema for organizing content
const sectionSchema = new mongoose.Schema(
  {
    _id: {
      type: mongoose.Schema.Types.ObjectId,
      auto: true,
    },
    title: {
      type: String,
      required: true,
      trim: true,
      maxlength: 200,
    },
    description: {
      type: String,
      maxlength: 1000,
      default: "",
    },
    sortOrder: {
      type: Number,
      required: true,
      default: 0,
    },
    isPublished: {
      type: Boolean,
      default: false,
    },

    // Section content (lectures, quizzes, assignments, etc.)
    content: [contentSchema],

    // Section analytics
    analytics: {
      totalDuration: { type: Number, default: 0 }, // total duration in seconds
      totalContent: { type: Number, default: 0 }, // number of content items
      averageCompletionRate: { type: Number, default: 0 },
    },
  },
  {
    timestamps: true,
  }
);

const courseSchema = new mongoose.Schema(
  {
    // Basic course information
    title: {
      type: String,
      required: true,
      trim: true,
      maxlength: 100,
    },
    subtitle: {
      type: String,
      maxlength: 200,
    },
    description: {
      type: String,
      maxlength: 5000,
    },

    // Course categorization
    category: {
      type: String,
      index: true,
    },
    subcategory: {
      type: String,
    },
    topic: {
      type: String,
    },
    language: {
      type: String,
      default: "English",
    },
    level: {
      type: String,
      enum: ["Beginner", "Intermediate", "Advanced"],
      default: "Beginner",
    },

    // Media and presentation
    thumbnailUrl: {
      type: String,
    },
    promoVideoUrl: {
      type: String,
      default: null,
    },
    promoVideoDuration: {
      type: Number,
      default: 0,
    },

    // Instructor information
    instructorId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
      index: true,
    },

    // Course content and objectives
    learningObjectives: [{ type: String }],
    requirements: [{ type: String }],
    targetAudience: [{ type: String }],

    sections: [sectionSchema],

    // Course statistics
    rating: {
      type: Number,
      default: 0,
      min: 0,
      max: 5,
    },
    ratingSum: { type: Number, default: 0 },
    ratings: [
      {
        userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
        value: { type: Number, min: 1, max: 5 },
        comment: { type: String, maxlength: 500 },
        createdAt: { type: Date, default: Date.now },
      },
    ],
    notes: [
      {
        title: { type: String, required: true },
        topic: { type: String, required: true },
        fileUrl: { type: String },
        fileName: { type: String },
        fileSize: { type: Number }, // in bytes
        cloudinaryPublicId: { type: String }, // Cloudinary public ID for file management
        description: { type: String },
        isDownloadable: { type: Boolean, default: true },
        createdAt: { type: Date, default: Date.now },
      },
    ],
    totalRatings: {
      type: Number,
      default: 0,
    },
    totalStudents: {
      type: Number,
      default: 0,
    },

    // Course settings
    status: {
      type: String,
      enum: ["draft", "review", "published", "archived"],
      default: "draft",
    },
    isActive: {
      type: Boolean,
      default: true,
    },

    // Track completed steps in course creation workflow
    completedSteps: {
      type: [String],
      default: [],
      enum: ["landing-page", "curriculum", "publish"],
    },

    // Course completion and certificates
    certificateEnabled: {
      type: Boolean,
      default: true,
    },
    certificateTemplate: {
      type: String,
      default: null,
    },

    // Course analytics and metadata
    totalDuration: {
      type: Number,
      default: 0, // Total course duration in seconds
    },
    totalLectures: {
      type: Number,
      default: 0,
    },
    totalQuizzes: {
      type: Number,
      default: 0,
    },
    totalAssignments: {
      type: Number,
      default: 0,
    },
    totalResources: {
      type: Number,
      default: 0,
    },

    // Course access and enrollment
    enrollmentType: {
      type: String,
      enum: ["open", "invite_only", "paid"],
      default: "paid",
    },
    maxStudents: {
      type: Number,
      default: null, // null means unlimited
    },

    // SEO and marketing
    seoTitle: {
      type: String,
      maxlength: 60,
    },
    seoDescription: {
      type: String,
      maxlength: 160,
    },
    keywords: [{ type: String }],

    // Course completion tracking
    completionCriteria: {
      type: String,
      enum: ["all_content", "percentage_based", "time_based"],
      default: "percentage_based",
    },
    completionPercentage: {
      type: Number,
      min: 0,
      max: 100,
      default: 80,
    },

    // Accessibility features
    hasClosedCaptions: {
      type: Boolean,
      default: false,
    },
    hasTranscripts: {
      type: Boolean,
      default: false,
    },
    supportedLanguages: [{ type: String }],
  },
  {
    timestamps: true,
  }
);

// Virtual for calculating total content items
courseSchema.virtual("totalContentItems").get(function () {
  return this.sections.reduce((total, section) => {
    return total + (section.content ? section.content.length : 0);
  }, 0);
});

// Virtual for calculating course completion rate
courseSchema.virtual("averageCompletionRate").get(function () {
  if (this.sections.length === 0) return 0;

  const totalCompletionRate = this.sections.reduce((total, section) => {
    return total + (section.analytics?.averageCompletionRate || 0);
  }, 0);

  return totalCompletionRate / this.sections.length;
});

// Method to calculate total duration from sections
courseSchema.methods.calculateTotalDuration = function () {
  const totalSeconds = this.sections.reduce((total, section) => {
    return total + (section.analytics?.totalDuration || 0);
  }, 0);

  this.totalDuration = totalSeconds;
  return totalSeconds;
};

// Method to update course statistics
courseSchema.methods.updateStatistics = function () {
  let totalLectures = 0;
  let totalQuizzes = 0;
  let totalAssignments = 0;
  let totalResources = 0;

  this.sections.forEach((section) => {
    if (section.content) {
      section.content.forEach((content) => {
        switch (content.contentType) {
          case "video":
          case "video_slide_mashup":
          case "article":
            totalLectures++;
            break;
          case "quiz":
          case "practice_test":
            totalQuizzes++;
            break;
          case "assignment":
          case "coding_exercise":
            totalAssignments++;
            break;
        }
        totalResources += content.resources ? content.resources.length : 0;
      });
    }
  });

  this.totalLectures = totalLectures;
  this.totalQuizzes = totalQuizzes;
  this.totalAssignments = totalAssignments;
  this.totalResources = totalResources;
};

// Pre-save middleware to update statistics
courseSchema.pre("save", function (next) {
  this.calculateTotalDuration();
  this.updateStatistics();
  next();
});

// Indexes for better query performance
courseSchema.index({ instructorId: 1, status: 1 });
courseSchema.index({ category: 1, status: 1 });
courseSchema.index({ status: 1, isActive: 1 });
courseSchema.index({ rating: -1 });
courseSchema.index({ totalStudents: -1 });
courseSchema.index({ createdAt: -1 });
courseSchema.index({ title: "text", subtitle: "text", description: "text" });

// Indexes for sections and content
courseSchema.index({ "sections.content.contentType": 1 });
courseSchema.index({ "sections.isPublished": 1 });

const Course = mongoose.model("Course", courseSchema);

module.exports = Course;
